// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* Copyright (C) 2012 The giomm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <glibmm/interface.h>
#include <giomm/simpleaction.h>

_DEFS(giomm,gio)
_PINCLUDE(glibmm/private/interface_p.h)
_PINCLUDE(gio/gio.h)

#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GActionMapInterface GActionMapInterface;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

namespace Gio
{

class Action;

//TODO: Instead derive from ActionGroup, when we can break ABI,
//because the GActionMap interface requires the GActionGroup interface.
//LoadableIcon does a similar thing correctly, for instance.

/** ActionMap - Interface for action containers.
 * The ActionMap interface is implemented by ActionGroup implementations that
 * operate by containing a number of named Action instances, such as
 * SimpleActionGroup.
 *
 * One useful application of this interface is to map the names of actions from
 * various action groups to unique, prefixed names (e.g. by prepending "app."
 * or "win."). This is the motivation for the 'Map' part of the interface name.
 * @newin{2,32}
 */
class ActionMap : public Glib::Interface
{
  _CLASS_INTERFACE(ActionMap, GActionMap, G_ACTION_MAP, GActionMapInterface)

public:
  _WRAP_METHOD(Glib::RefPtr<Action> lookup_action(const Glib::ustring& action_name), g_action_map_lookup_action)
  _WRAP_METHOD(Glib::RefPtr<const Action> lookup_action(const Glib::ustring& action_name) const, g_action_map_lookup_action, constversion)

  /** A Slot to be called when an action has been activated.
   * See add_action().
   *
   * For instance,
   * void on_slot_activated(const Glib::VariantBase& parameter);
   */
  typedef sigc::slot< void,const Glib::VariantBase& > ActivateSlot;

  //This is our equivalent for g_action_map_add_action_entries().
  /** A convenience method for creating a SimpleAction instance
   * and adding it to the ActionMap.
   *
   * @param name The name of the Action.
   * @param slot The callback method to be called when the action is activated.
   * @return The Action.
   */
  Glib::RefPtr<SimpleAction> add_action(const Glib::ustring& name, const ActivateSlot& slot);
  _IGNORE(g_action_map_add_action_entries)

  _WRAP_METHOD(void add_action(const Glib::RefPtr<Action>& action), g_action_map_add_action)
  _WRAP_METHOD(void remove_action(const Glib::ustring& action_name), g_action_map_remove_action)

#m4 _CONVERSION(`Glib::RefPtr<Action>', `GAction*', `Glib::unwrap($3)')
  _WRAP_VFUNC(Glib::RefPtr<Action> lookup_action(const Glib::ustring& name) const, "lookup_action")

  _WRAP_VFUNC(void add_action(Glib::RefPtr<Action> action) const, "add_action")
  _WRAP_VFUNC(void remove_action(const Glib::ustring& name), "remove_action")
};

} // namespace Gio
