// Generated by gtkmmproc -- DO NOT MODIFY!


#include <glibmm.h>

#include <giomm/pollableoutputstream.h>
#include <giomm/private/pollableoutputstream_p.h>


// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* Copyright (C) 2012 The giomm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gio/gio.h>
#include <giomm/cancellable.h>

namespace Gio
{

} // namespace Gio

namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gio::PollableOutputStream> wrap(GPollableOutputStream* object, bool take_copy)
{
  return Glib::RefPtr<Gio::PollableOutputStream>( dynamic_cast<Gio::PollableOutputStream*> (Glib::wrap_auto_interface<Gio::PollableOutputStream> ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} // namespace Glib


namespace Gio
{


/* The *_Class implementation: */

const Glib::Interface_Class& PollableOutputStream_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Interface_Class has to know the interface init function
    // in order to add interfaces to implementing types.
    class_init_func_ = &PollableOutputStream_Class::iface_init_function;

    // We can not derive from another interface, and it is not necessary anyway.
    gtype_ = g_pollable_output_stream_get_type();
  }

  return *this;
}

void PollableOutputStream_Class::iface_init_function(void* g_iface, void*)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_iface);

  //This is just to avoid an "unused variable" warning when there are no vfuncs or signal handlers to connect.
  //This is a temporary fix until I find out why I can not seem to derive a GtkFileChooser interface. murrayc
  g_assert(klass != 0); 

  klass->can_poll = &can_poll_vfunc_callback;
  klass->is_writable = &is_writable_vfunc_callback;
  klass->write_nonblocking = &write_nonblocking_vfunc_callback;

}

gboolean PollableOutputStream_Class::can_poll_vfunc_callback(GPollableOutputStream* self)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
      #endif //GLIBMM_EXCEPTIONS_ENABLED
        // Call the virtual member method, which derived classes might override.
        return static_cast<int>(obj->can_poll_vfunc());
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
      #endif //GLIBMM_EXCEPTIONS_ENABLED
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(self), CppObjectType::get_type()) // Get the interface.
)  );

  // Call the original underlying C function:
  if(base && base->can_poll)
  {
    gboolean retval = (*base->can_poll)(self);
    return retval;
  }


  typedef gboolean RType;
  return RType();
}
gboolean PollableOutputStream_Class::is_writable_vfunc_callback(GPollableOutputStream* self)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
      #endif //GLIBMM_EXCEPTIONS_ENABLED
        // Call the virtual member method, which derived classes might override.
        return static_cast<int>(obj->is_writable_vfunc());
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
      #endif //GLIBMM_EXCEPTIONS_ENABLED
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(self), CppObjectType::get_type()) // Get the interface.
)  );

  // Call the original underlying C function:
  if(base && base->is_writable)
  {
    gboolean retval = (*base->is_writable)(self);
    return retval;
  }


  typedef gboolean RType;
  return RType();
}
gssize PollableOutputStream_Class::write_nonblocking_vfunc_callback(GPollableOutputStream* self, const void* buffer, gsize count, GError** error)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
      #endif //GLIBMM_EXCEPTIONS_ENABLED
        // Call the virtual member method, which derived classes might override.
        return obj->write_nonblocking_vfunc(buffer, count);
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
      #endif //GLIBMM_EXCEPTIONS_ENABLED
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(self), CppObjectType::get_type()) // Get the interface.
)  );

  // Call the original underlying C function:
  if(base && base->write_nonblocking)
  {
    gssize retval = (*base->write_nonblocking)(self, buffer, count, error);
    if(*error)
      ::Glib::Error::throw_exception(*error);
    return retval;
  }


  typedef gssize RType;
  return RType();
}


Glib::ObjectBase* PollableOutputStream_Class::wrap_new(GObject* object)
{
  return new PollableOutputStream((GPollableOutputStream*)(object));
}


/* The implementation: */

PollableOutputStream::PollableOutputStream()
:
  Glib::Interface(pollableoutputstream_class_.init())
{}

PollableOutputStream::PollableOutputStream(GPollableOutputStream* castitem)
:
  Glib::Interface((GObject*)(castitem))
{}

PollableOutputStream::PollableOutputStream(const Glib::Interface_Class& interface_class)
: Glib::Interface(interface_class)
{
}

PollableOutputStream::~PollableOutputStream()
{}

// static
void PollableOutputStream::add_interface(GType gtype_implementer)
{
  pollableoutputstream_class_.init().add_interface(gtype_implementer);
}

PollableOutputStream::CppClassType PollableOutputStream::pollableoutputstream_class_; // initialize static member

GType PollableOutputStream::get_type()
{
  return pollableoutputstream_class_.init().get_type();
}


GType PollableOutputStream::get_base_type()
{
  return g_pollable_output_stream_get_type();
}


bool PollableOutputStream::can_poll() const
{
  return g_pollable_output_stream_can_poll(const_cast<GPollableOutputStream*>(gobj()));
}

bool PollableOutputStream::is_writable() const
{
  return g_pollable_output_stream_is_writable(const_cast<GPollableOutputStream*>(gobj()));
}

gssize PollableOutputStream::write_nonblocking(const void* buffer, gsize count, const Glib::RefPtr<Cancellable>& cancellable)
{
  GError* gerror = 0;
  gssize retvalue = g_pollable_output_stream_write_nonblocking(gobj(), buffer, count, const_cast<GCancellable*>(Glib::unwrap(cancellable)), &(gerror));
  if(gerror)
    ::Glib::Error::throw_exception(gerror);
  return retvalue;
}

gssize PollableOutputStream::write_nonblocking(const void* buffer, gsize count)
{
  GError* gerror = 0;
  gssize retvalue = g_pollable_output_stream_write_nonblocking(gobj(), buffer, count, 0, &(gerror));
  if(gerror)
    ::Glib::Error::throw_exception(gerror);
  return retvalue;
}


bool Gio::PollableOutputStream::can_poll_vfunc() const
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(gobject_), CppObjectType::get_type()) // Get the interface.
)  );

  if(base && base->can_poll)
  {
    bool retval((*base->can_poll)(const_cast<GPollableOutputStream*>(gobj())));
    return retval;
  }

  typedef bool RType;
  return RType();
}
bool Gio::PollableOutputStream::is_writable_vfunc() const
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(gobject_), CppObjectType::get_type()) // Get the interface.
)  );

  if(base && base->is_writable)
  {
    bool retval((*base->is_writable)(const_cast<GPollableOutputStream*>(gobj())));
    return retval;
  }

  typedef bool RType;
  return RType();
}
gssize Gio::PollableOutputStream::write_nonblocking_vfunc(const void* buffer, gsize count) 
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(gobject_), CppObjectType::get_type()) // Get the interface.
)  );

  if(base && base->write_nonblocking)
  {
    GError* gerror = 0;
    gssize retval((*base->write_nonblocking)(gobj(),buffer,count,&(gerror)));
    if(gerror)
      ::Glib::Error::throw_exception(gerror);
    return retval;
  }

  typedef gssize RType;
  return RType();
}


} // namespace Gio


